lastDrawX = 0 
lastDrawY = 0
firstDraw = true
ratio = 0
lista = {}
angle = 0

--bs_setmode(1)

function  default_size()
  return   100, 0.25
end

function ponta(x, y, r, g, b, o, w)
  local bx = w/4
  local by = w/2
  local dx, dy = bs_dir()
  local rotation = bs_atan(dx, dy)
  local num = 4
  for i = 1, num, 1
  do
    bs_polygon(bx, -by)
    coluna(bx, -by, by)
    bs_polygon(bx, by)

    if rotation < 0 then
      linha(bx, -bx, by, 1)
    end
    bs_polygon(-bx, by)
    coluna(-bx, by, -by)
    bs_polygon(-bx, -by)

    if rotation > 0 then
      linha(-bx, bx, -by, 1)
    end
    bs_polygon_move(x, y)
    bs_fill(r, g, b, o/2)
  end
end

function coluna(x, y1, y2)
  local signal = 1
  local t = y2 - y1
  if t < 0 then
    signal = -signal
  end
  local recou = signal * 10
  local l = x
  local last = y1
  for i = y1 + recou, y2 - recou * 2, recou
  do
    for j = 1, 5, 1
    do
      l = l + math.random(-1, 1)
      last =  i + j * 2 * signal
      bs_polygon(l, last)
    end
  end
  recou = 2 * signal
  local f = (y2 - last)/2
  local w = (l - x)/math.abs(f)
  
  for i = last + recou, y2, recou
  do
    l = l - w + math.random(-1,1)
    bs_polygon(l, i)
  end
end

function linha(x1, x2, y, flag)
  local plus = 2
  local ratio = 5
  local ratioy = 3
  local t = x2 - x1
  local g = x1 + (t/2)
  local u = g + plus
  if t < 0 then
    plus = -plus
  end
  for i = x1, g, plus
  do
    bs_polygon(i + math.random(-ratio, ratio), y + math.random(-ratioy, 0))
  end

  if flag == 1 then
    coluna(g, y, -y)
    coluna(u, -y, y)
  else
    u = g
  end

  for i = u, x2, plus
  do
    bs_polygon(i + math.random(-ratio, ratio), y + math.random(-ratioy, 0))
  end
end

function diagonal(x1, y1, x2, y2)
  local ax = x2 - x1
  local ay = y2 - y1
  local j = y1
  local plus = 2
  local ratio = 3
  if ax < 0 then
    plus = -plus
  end
  local a = ay / (ax/plus)
  for i = x1, x2, plus
  do
    bs_polygon(i, j + math.random(-2, 2))
    j = j + a
  end
end

function draw_middle(x, y, dx, dy, r, g, b, o, basex, basey, rotation)
  local num = 4
  local e = 2
  local signal = 1
  if dx < 0 then
    signal = -1
  end
  if rotation > 0 then
    basex = -basex
    basey = -basey
  end
  
  for i = 1, num, 1
  do
    if rotation <= -1.57 or (rotation > 0 and rotation <= 1.57) then
      bs_polygon(basex , -basey )

      diagonal(basex , -basey , basex  + dx, -basey  + dy)

      bs_polygon(basex  + dx, -basey + dy)

      bs_polygon(-basex  + dx, -basey  + dy)

      coluna(-basex  + dx, -basey + dy, -basey)

      --mix color

      coluna(-basex  + dx - signal * 2, -basey, basey  + dy)
      
      bs_polygon(-basex  + dx - signal * 2, basey  + dy)

      diagonal(-basex  + dx, basey  + dy, -basex , basey )

      bs_polygon(-basex , basey )

      coluna(-basex , basey , -basey )
      
      bs_polygon(-basex , -basey )

      bs_polygon(basex , -basey )
    else
      bs_polygon(basex , -basey )

      coluna(basex , -basey , basey )

      bs_polygon(basex , basey )

      diagonal(basex , basey , basex  + dx, basey  + dy)

      bs_polygon(basex  + dx, basey  + dy)

      coluna(basex  + dx, basey  + dy, -basey)
      bs_polygon(basex  + dx, -basey)

      bs_polygon_move(x, y)
      bs_fill(0, g, b, o/e)

      bs_polygon(basex  + dx, -basey)

      coluna(basex  + dx, -basey, -basey  + dy)

      bs_polygon(basex  + dx + signal, -basey  + dy)

      for v = 1, #lista do
        bs_polygon(basex  + dx + lista[v], -basey  + dy)
        bs_polygon(basex  + dx + lista[v], -basey)
        bs_polygon(basex  + dx + lista[v] + signal * 3, -basey  + dy)
      end
      
      bs_polygon(-basex  + dx, -basey  + dy)

      diagonal(-basex  + dx, -basey  + dy, -basex , -basey)

      bs_polygon(-basex , -basey)
    end
    bs_polygon_move(x, y)
    bs_fill(r, g, b, o/e)
  end
  for v = 1, #lista do
    lista[v] = lista[v] + dx
    if math.abs(lista[v] + basex) >= math.abs(-basex - dx/2) then
      table.remove(lista, v)
    end
  end
  table.insert(lista, dx)
end

function main(x, y, p)
  local width = bs_width()
  local updateDist = width/4

  local r, g, b = bs_fore()
  local opacity = bs_opaque() * 255 * p

  local base = width/2
  local basex = (width)/4
  local basey = (width)/2

  if not firstDraw then
    local distance = bs_distance(lastDrawX - x, lastDrawY - y)
    if distance < updateDist then
      return 0
    end
  else
    ponta(x, y, r, g, b, opacity, width)
    firstDraw = false
    lastDrawX = x
    lastDrawY = y
    return 1
  end
 
  local ax = lastDrawX - x
  local ay = lastDrawY - y
  
  local dx, dy = bs_dir()
  local rotation = bs_atan(dx, dy)
  local teste = rotation * angle

  --[[if teste < 0 then
    if angle > 0 and rotation < 0 then
      ponta(lastDrawX, lastDrawY, r, g, b, opacity, width)
    else
      lastDrawX = x
      lastDrawY = y
      firstDraw = false
      angle = rotation
      return 1
    end 
  end]]--

  angle = rotation
  draw_middle(x, y, ax, ay, r, g, b, opacity, basex, basey, rotation)

  lastDrawX = x
  lastDrawY = y
  firstDraw = false
  return 1
end

